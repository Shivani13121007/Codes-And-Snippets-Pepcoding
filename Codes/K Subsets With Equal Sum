**************************************************** Python Code ****************************************************

def solution(arr,  vidx,  n,  k,  subsetSum,  ssssf,  ans) :
    
    # Base Case
    if (vidx == n) :
        if (ssssf == k) :
            flag = True
            i = 0
            while (i < len(subsetSum) - 1) :
                if (subsetSum[i] != subsetSum[i + 1]) :
                    flag = False
                    break
                i += 1
            if (flag == True) :
                for e in ans :
                    print(str(e) + " ", end ="")
                print()
        return
    
    # Logic
    i = 0
    while (i < len(ans)) :
        if (len(ans[i]) > 0) :
            ans[i].append(arr[vidx])
            subsetSum[i] += arr[vidx]
            solution(arr, vidx + 1, n, k, subsetSum, ssssf, ans)
            del ans[i][len(ans[i]) - 1]
            subsetSum[i] -= arr[vidx]
        else :
            ans[i].append(arr[vidx])
            subsetSum[i] += arr[vidx]
            solution(arr, vidx + 1, n, k, subsetSum, ssssf + 1, ans)
            del ans[i][len(ans[i]) - 1]
            subsetSum[i] -= arr[vidx]
            break
        i += 1




# Main

n = int(input())
arr = [0] * (n)
sum1= 0
i = 0
while (i < len(arr)) :
    arr[i] = int(input())
    sum1 += arr[i]
    i += 1
k = int(input())

if (k == 1) :
    print("[" ,end="")
    i = 0
    while (i < len(arr)) :
        print(str(arr[i]) + ", ", end ="")
        i += 1
    print("]")

# if there are more subsets than no. of elements in list or sum1 of all elements is not divisible by k
if (k > n or sum1 % k != 0) :
    print("-1")
    
subsetSum = [0] * (k)
ans =  []
i = 0
while (i < k) :
    ans.append( [])
    i += 1

solution(arr, 0, n, k, subsetSum, 0, ans)





**************************************************** CPP Code ****************************************************


#include<bits/stdc++.h>

using namespace std;

void solution(vector<int>& arr,int vidx, int n,int k,vector<int>& subsetSum,int ssssf,vector<vector<int>>& ans)
{
    if(vidx == n)
    {
        if(ssssf == k)
        {
            bool flag = true;
            for(int i=1;i<subsetSum.size();i++)
            {
                if(subsetSum[i] != subsetSum[i-1])
                {
                    flag = false;
                    break;
                }
            } 
            if(flag == true)
                {
                    for(int i=0;i<ans.size();i++)
                    {
                        cout<<"[";
                        for(int j=0;j<ans[i].size()-1;j++)
                        {
                            
                            cout<<ans[i][j]<<", ";
                        }
                        cout<<ans[i][ans[i].size()-1];
                        cout<<"] ";
                    }
                    cout<<endl;
                }
        }
        return;
    }
    

    for(int i=0; i<ans.size(); i++)
    {
        vector<int>& e=ans[i];
        if(e.size()>0)
        {
            e.push_back(arr[vidx]);
            subsetSum[i] += arr[vidx];
            solution(arr,vidx+1,n,k,subsetSum,ssssf,ans);
            e.pop_back();
            subsetSum[i] -= arr[vidx];
        } else {
            e.push_back(arr[vidx]);
            subsetSum[i] += arr[vidx];
            solution(arr,vidx+1,n,k,subsetSum,ssssf+1,ans);
            e.pop_back();
            subsetSum[i] -= arr[vidx];
            break;
        }
    }
}

int main()
{
    
    int n;
    cin>>n;
    
    vector<int> arr(n,0);
    int sum = 0;
    for(int i=0;i<arr.size();i++)
    {
        cin>>arr[i];
        sum+=arr[i];
    }
    
    int k;
    cin>>k;
    
    if(k==1)
    {
        cout<<"[";
        for(int i=0;i<arr.size()-1;i++)
        {
            cout<<arr[i]<<", ";
        }
        cout<<arr[arr.size()-1];
        cout<<"]";
        return 0 ;
    }
    
    if(k > n || sum % k != 0)
    {
        cout<<"-1";
        return 0;
    }
    
    vector<int> subsetSum(k,0);
    
    vector<vector<int>> ans(k);
    
    solution(arr,0,n,k,subsetSum,0,ans);
  
    return 0;
}
